class Solution {
    public int largestRectangleArea(int[] heights) {
        
        int n = heights.length;
        int left[] = new int[n];
        int right[] = new int[n];
        int total[] = new int[n];
        
        Stack<Integer> st = new Stack<>();
        
        //For left
        for(int i=0;i<n;i++){
            
            while( !st.isEmpty() && heights[st.peek()]>=heights[i]){
                st.pop();
            }
            
            if(st.isEmpty()){
                left[i]=0;
                st.push(i);
                continue;
            }
            
            if(heights[st.peek()]<heights[i]){
                left[i]=st.peek()+1;
                st.push(i);
            }
            
        }
        
        while(!st.isEmpty()){
            st.pop();
        }
        
        //For right
        for(int i=n-1;i>=0;i--){
            
            while( !st.isEmpty() && heights[st.peek()]>=heights[i]){
                st.pop();
            }
            
            if(st.isEmpty()){
                right[i]=n-1;
                st.push(i);
                continue;
            }
            
            if(heights[st.peek()]<heights[i]){
                right[i]=st.peek()-1;
                st.push(i);
            }
            
        }
        
        for(int i=0;i<n;i++){
            total[i]=right[i]-left[i]+1;    
        }
        
        for(int i=0;i<n;i++){
            System.out.println(total[i]);
        }
        
        int ans = -1;
        
        for(int i=0;i<n;i++){
            ans = Math.max(ans,total[i]*heights[i]);
        }
        
        return ans;
    }
}