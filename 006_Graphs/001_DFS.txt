class Solution {
    // Function to return a list containing the DFS traversal of the graph.
    
    static void dfs(int i,boolean []vis, ArrayList<ArrayList<Integer>>adj,ArrayList<Integer>ans){
        ans.add(i);
        vis[i]=true;
        ArrayList<Integer>sub=adj.get(i);
        for(int j=0;j<sub.size();j++){
            if(vis[sub.get(j)]!=true){
            dfs(sub.get(j),vis, adj,ans);
            }
        }
    }
    
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        ArrayList<Integer> ans=new ArrayList<Integer>();
        boolean vis[] = new boolean[V];
        
        for(int i=0;i<V;i++){
            if(vis[i]!=true){
                dfs(i,vis, adj,ans);
            }
        }
        return ans;
    }
}